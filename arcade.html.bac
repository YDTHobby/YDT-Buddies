<!DOCTYPE HTML>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>YDT Barnyard Buddies - Arcade Machine</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            image-rendering: pixelated;
            image-rendering: -moz-crisp-edges;
            image-rendering: crisp-edges;
        }
        
        body {
            background: #1a1a1a;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            font-family: 'Courier New', monospace;
            overflow: hidden;
        }
        
        /* Arcade Machine - Adjusted for 320x480 aspect ratio */
        #arcadeMachine {
            position: relative;
            width: 500px;
            height: 900px;
            background: linear-gradient(180deg, #2a2a2a 0%, #1a1a1a 100%);
            border-radius: 20px 20px 10px 10px;
            box-shadow: 
                0 0 50px rgba(0,0,0,0.8),
                inset 0 0 20px rgba(255,255,255,0.1);
            padding: 20px;
            padding-top: 40px;
            transform: perspective(1000px) rotateX(2deg);
        }
        
        /* Marquee */
        #marquee {
            position: absolute;
            top: -80px;
            left: 50%;
            transform: translateX(-50%);
            width: 400px;
            height: 80px;
            background: linear-gradient(135deg, #8B4513 0%, #D2691E 100%);
            border-radius: 10px 10px 0 0;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 
                0 0 30px rgba(139,69,19,0.5),
                inset 0 0 20px rgba(255,255,255,0.3);
        }
        
        #marquee h1 {
            color: #FFF;
            font-size: 24px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            font-weight: bold;
            letter-spacing: 2px;
        }
        
        /* Screen */
        #screenBezel {
            position: relative;
            width: 100%;
            height: 550px;
            background: #000;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 
                inset 0 0 30px rgba(0,0,0,0.8),
                0 0 10px rgba(255,255,255,0.1);
        }
        
        #screenContainer {
            position: relative;
            width: 100%;
            height: 100%;
            background: #111;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: inset 0 0 40px rgba(0,0,0,0.9);
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        /* CRT Effect */
        #screenContainer::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: repeating-linear-gradient(
                0deg,
                rgba(0,0,0,0.15) 0px,
                transparent 1px,
                transparent 2px,
                rgba(0,0,0,0.15) 3px
            );
            pointer-events: none;
            z-index: 1000;
        }
        
        /* Game Frame */
        #gameFrame {
            width: 320px;
            height: 480px;
            border: none;
            image-rendering: pixelated;
            image-rendering: -moz-crisp-edges;
            image-rendering: crisp-edges;
        }
        
        /* Control Panel */
        #controlPanel {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 95%;
            height: 200px;
            background: linear-gradient(180deg, #3a3a3a 0%, #2a2a2a 100%);
            border-radius: 10px;
            box-shadow: 
                inset 0 2px 5px rgba(0,0,0,0.5),
                0 2px 5px rgba(255,255,255,0.1);
            display: flex;
            justify-content: space-around;
            align-items: center;
            padding: 20px;
        }
        
        /* Joystick */
        .joystick-container {
            position: relative;
            width: 100px;
            height: 100px;
            background: #1a1a1a;
            border-radius: 50%;
            box-shadow: 
                inset 0 5px 15px rgba(0,0,0,0.8),
                0 2px 5px rgba(255,255,255,0.1);
        }
        
        .joystick {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 50px;
            height: 50px;
            background: radial-gradient(circle at 30% 30%, #ff3333, #cc0000);
            border-radius: 50%;
            box-shadow: 
                0 5px 10px rgba(0,0,0,0.5),
                inset 0 -5px 10px rgba(0,0,0,0.3);
            cursor: pointer;
            transition: transform 0.1s;
        }
        
        /* Arcade Buttons */
        .button-group {
            display: flex;
            flex-direction: column;
            gap: 15px;
            align-items: center;
        }
        
        .button-row {
            display: flex;
            gap: 15px;
        }
        
        .arcadeButton {
            width: 60px;
            height: 60px;
            background: radial-gradient(circle at 30% 30%, #ff3333, #cc0000);
            border: 4px solid #000;
            border-radius: 50%;
            box-shadow: 
                0 5px 10px rgba(0,0,0,0.5),
                inset 0 -5px 10px rgba(0,0,0,0.3);
            cursor: pointer;
            position: relative;
            transition: all 0.1s;
        }
        
        .arcadeButton.yellow {
            background: radial-gradient(circle at 30% 30%, #FFD700, #FFA500);
        }
        
        .arcadeButton.green {
            background: radial-gradient(circle at 30% 30%, #00ff00, #00cc00);
        }
        
        .arcadeButton.blue {
            background: radial-gradient(circle at 30% 30%, #3333ff, #0000cc);
        }
        
        .arcadeButton.small {
            width: 40px;
            height: 40px;
        }
        
        .arcadeButton:active {
            transform: translateY(3px);
            box-shadow: 
                0 2px 5px rgba(0,0,0,0.5),
                inset 0 -2px 5px rgba(0,0,0,0.3);
        }
        
        .arcadeButton::after {
            position: absolute;
            bottom: -20px;
            left: 50%;
            transform: translateX(-50%);
            color: #fff;
            font-size: 10px;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
            white-space: nowrap;
        }
        
        #jumpBtn::after { content: 'JUMP'; }
        #startBtn::after { content: 'START'; }
        #pauseBtn::after { content: 'PAUSE'; }
        
        /* HUD Display */
        #hudDisplay {
            position: absolute;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            color: #FFD700;
            font-size: 16px;
            text-align: center;
            text-shadow: 2px 2px 0 #000;
        }
        
        /* Mobile Adjustments */
        @media (max-width: 600px) {
            #arcadeMachine {
                width: 95vw;
                max-width: 400px;
                height: auto;
            }
            
            #marquee {
                width: 90%;
                font-size: 18px;
            }
            
            #controlPanel {
                flex-wrap: wrap;
                height: auto;
                gap: 10px;
            }
            
            .joystick-container {
                width: 80px;
                height: 80px;
            }
            
            .arcadeButton {
                width: 50px;
                height: 50px;
            }
            
            .arcadeButton.small {
                width: 35px;
                height: 35px;
            }
        }
    </style>
</head>
<body>
    <div id="arcadeMachine">
        <div id="marquee">
            <h1>YDT BARNYARD BUDDIES</h1>
        </div>
        
        <div id="screenBezel">
            <div id="screenContainer">
                <div id="hudDisplay"></div>
                <iframe id="gameFrame" src="index.html"></iframe>
            </div>
        </div>
        
        <div id="controlPanel">
            <div class="joystick-container">
                <div class="joystick" id="joystick"></div>
            </div>
            
                <div class="button-row">
                    <button class="arcadeButton" id="jumpBtn"></button>
                </div>
                <div class="button-row">
                    <button class="arcadeButton small green" id="startBtn"></button>
                    <button class="arcadeButton small blue" id="pauseBtn"></button>
                </div>
            </div>
        </div>
    </div>
    
<script>
  const gameFrame = document.getElementById('gameFrame');
  let gameWindow = null;

  gameFrame.onload = function () {
    gameWindow = gameFrame.contentWindow;
    setTimeout(() => {
      setupControls();
    }, 1000);
  };

function simulateKey(key, isDown) {
  if (!gameWindow) return;
  const event = new KeyboardEvent(isDown ? 'keydown' : 'keyup', {
    key,
    bubbles: true
  });
  gameWindow.dispatchEvent(event); // âœ… Send to iframe's window, not document
}

  function setupJoystick() {
    const joystickEl = document.getElementById('joystick');
    const container = joystickEl.parentElement;
    let active = false;
    let lastLeft = false;
    let lastRight = false;

    const updateJoystick = (e) => {
      if (!active) return;

      const rect = container.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;

      const x = clientX - centerX;
      const distance = Math.abs(x);
      const maxDistance = rect.width / 2 - 25;
      const moveX = Math.max(-maxDistance, Math.min(maxDistance, x));

      joystickEl.style.transform = `translate(${moveX}px, 0)`;

      const goingLeft = moveX < -10;
      const goingRight = moveX > 10;

      if (goingLeft !== lastLeft) {
        simulateKey('ArrowLeft', goingLeft);
        lastLeft = goingLeft;
      }

      if (goingRight !== lastRight) {
        simulateKey('ArrowRight', goingRight);
        lastRight = goingRight;
      }
    };

    const startJoystick = (e) => {
      e.preventDefault();
      active = true;
      updateJoystick(e);
    };

    const endJoystick = () => {
      active = false;
      joystickEl.style.transform = 'translate(0, 0)';
      simulateKey('ArrowLeft', false);
      simulateKey('ArrowRight', false);
      lastLeft = false;
      lastRight = false;
    };

    container.addEventListener('mousedown', startJoystick);
    container.addEventListener('touchstart', startJoystick);
    window.addEventListener('mousemove', updateJoystick);
    window.addEventListener('touchmove', updateJoystick);
    window.addEventListener('mouseup', endJoystick);
    window.addEventListener('touchend', endJoystick);
  }

  function setupButton(id, key) {
    const btn = document.getElementById(id);
    if (!btn) return;

    const press = (e) => {
      e.preventDefault();
      simulateKey(key, true);
    };

    const release = (e) => {
      e.preventDefault();
      simulateKey(key, false);
    };

    btn.addEventListener('mousedown', press);
    btn.addEventListener('touchstart', press);
    btn.addEventListener('mouseup', release);
    btn.addEventListener('touchend', release);
    btn.addEventListener('mouseleave', release);
  }

  function setupControls() {
    setupJoystick();
    setupButton('jumpBtn', 'ArrowUp');
    setupButton('startBtn', 'Enter');
    setupButton('pauseBtn', 'Escape');
  }

  setInterval(() => {
    try {
      if (gameWindow && gameWindow.Q && gameWindow.Q.state) {
        const hud = document.getElementById('hudDisplay');
        const coins = gameWindow.Q.state.get('coins') || 0;
        hud.textContent = `COINS: ${coins}`;
      }
    } catch (e) {
      // Catch possible cross-origin issues (if any)
    }
  }, 100);
</script>

</body>
</html>
